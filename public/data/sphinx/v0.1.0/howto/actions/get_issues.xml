<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-tutorials/howto/actions/get_issues.rst">
    <target refid="actions-get-issues"></target>
    <section ids="retrieve-issue-items actions-get-issues" names="retrieve\ issue\ items actions_get_issues">
        <title>Retrieve <literal>Issue</literal> items</title>
    </section>
    <section ids="about-issues" names="about\ issues">
        <title>About issues</title>
        <paragraph>Selected libCellML classes contain a <literal classes="code">Logger</literal> whose job it is to curate any issues encountered within the class, and return them to the user when asked.
            The classes are:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>the <literal classes="code">Parser</literal> class;</paragraph>
            </list_item>
            <list_item>
                <paragraph>the <literal classes="code">Validator</literal> class;</paragraph>
            </list_item>
            <list_item>
                <paragraph>the <literal classes="code">Printer</literal> class;</paragraph>
            </list_item>
            <list_item>
                <paragraph>the <literal classes="code">Analyser</literal> class;</paragraph>
            </list_item>
            <list_item>
                <paragraph>the <literal classes="code">Importer</literal> class; and</paragraph>
            </list_item>
            <list_item>
                <paragraph>the <literal classes="code">Generator</literal> class.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>Individual issues can be retrieved from the parent class by their index, an integer between 0 and <literal classes="code">issueCount()-1</literal>.
            Each issue contains a severity level indicator, one of four levels (<literal classes="code">ERROR</literal>, <literal classes="code">WARNING</literal>, <literal classes="code">HINT</literal>, or <literal classes="code">MESSAGE</literal>):</paragraph>
        <block_quote>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal classes="code">ERROR</literal> level indicates issues that must be resolved before the model is valid and runnable;</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="code">WARNING</literal> level indicates a non-fatal issue, but one that may cause hidden or unintended consequences;</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="code">HINT</literal> level indicates a commonly encountered valid-but-nonsense situation; and</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal classes="code">MESSAGE</literal> level is for your information but does not require action.</paragraph>
                </list_item>
            </bullet_list>
        </block_quote>
        <paragraph>Issues can also be retrieved from subgroups based on their severity, as shown in the examples below.</paragraph>
        <container classes="toggle">
            <container classes="header">
                <paragraph>See C++ example</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Iterate through all the issues in a Validator, regardless of level, and print to the terminal.
for (size_t i = 0; i &lt; validator-&gt;issueCount(); ++i) {
  // Retrieve the i-th issue and store it in the variable "myIssue".
  libcellml::IssuePtr myIssue = validator-&gt;issue(i);

  // Print the issue's description:
  std::cout &lt;&lt; myIssue-&gt;description() &lt;&lt; std::endl;

  // Print the issue's URL.  This is a URL at which more
  // information could be found about the cause and corrections
  // are needed to avoid it.
  std::cout &lt;&lt; myIssue-&gt;url() &lt;&lt; std::endl;

  // Validator only: Print the issue's reference. This is
  // the heading reference in the normative specification which
  // relates to this issue.
  std::cout &lt;&lt; myIssue-&gt;referenceHeading() &lt;&lt; std::endl;
}

// Retrieve the second ERROR level issue from a Printer. Note indexing from 0.
auto secondError = printer-&gt;error(1);

// Retrieve the last WARNING level issue from a Parser.
auto lastWarning = parser-&gt;warning(parser-&gt;warningCount()-1);

// Iterate through all HINT level issues in a Generator.
for (size_t h = 0; h &lt; generator-&gt;hintCount(); ++i) {
  // Retrieve the h-th hint and store it in the variable "myHint".
  auto myHint = generator-&gt;hint(h);
}</literal_block>
        </container>
        <container classes="toggle">
            <container classes="header">
                <paragraph>See Python example</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve"># Iterate through all the issues in a Validator, regardless of level, and print to the terminal.
for i in range(0, validator.issueCount()):
  # Retrieve the i-th issue and store it in the variable "my_issue".
  my_issue = validator.issue(i)

  # Print the issue's description:
  print(my_issue.description())

  # Print the issue's URL.  This is a URL at which more
  # information could be found about the cause and corrections
  # are needed to avoid it.
  print(my_issue.url())

  # Validator only: Print the issue's reference. This is
  # the heading reference in the normative specification which
  # relates to this issue.
  print(my_issue.referenceHeading())

# Retrieve the second ERROR level issue from a Printer. Note indexing from 0.
second_error = printer.error(1)

# Retrieve the last WARNING level issue from a Parser.
last_warning = parser.warning(parser.warningCount() - 1)

# Iterate through all HINT level issues in a Generator.
for h in range(0, generator.hintCount()):
  # Retrieve the h-th hint and store it in the variable "my_hint".
  my_hint = generator.hint(h)</literal_block>
        </container>
        <paragraph>Each <literal classes="code">Issue</literal> also contains the following attributes:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>A description: a brief statement about the problem and how it might be fixed;</paragraph>
            </list_item>
            <list_item>
                <paragraph>A reference heading: a chapter number pertaining to the formal <reference internal="False" refuri="https://cellml-specification.readthedocs.io/en/latest/CellML 2.0 Specification">CellML 2.0 Specification</reference> document, for issues related to formatting and specification;</paragraph>
            </list_item>
            <list_item>
                <paragraph>A URL: a web address at which more detailed information and examples pertaining to the issue are available;</paragraph>
            </list_item>
            <list_item>
                <paragraph>A cause: an <literal classes="code">enum</literal> which reports the type of item responsible for the issue.
                    This is one of the enums:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal classes="code">COMPONENT</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">CONNECTION</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">ENCAPSULATION</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">IMPORT</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">MAP_VARIABLES</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">MATHML</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">MODEL</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">RESET</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">RESET_VALUE</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">TEST_VALUE</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">UNDEFINED</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">UNIT</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">UNITS</literal>,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">VARIABLE</literal>, and</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="code">XML</literal>.</paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
        </bullet_list>
        <container classes="toggle">
            <container classes="header">
                <paragraph>See C++ examples</paragraph>
                <block_quote>
                    <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Retrieve and print the description of the issue.
std::cout &lt;&lt; issue-&gt;description() &lt;&lt; std::endl;

// Retrieve and print the reference heading number, if related to CellML2.0 specification and format.
std::cout &lt;&lt; issue-&gt;referenceHeading() &lt;&lt; std::endl;

// Retrieve and print the URL for more help and information about the issue.
std::cout &lt;&lt; issue-&gt;url() &lt;&lt; std::endl;

// Retrieve and print the item type - a libcellml::CellmlElementType enum - for the issue.
std::cout &lt;&lt; getElementTypeFromEnum(issue-&gt;CellmlElementType()) &lt;&lt; std::endl;

// Retrieve and print the level - a libcellml::Issue::LEVEL enum - for the issue.
std::cout &lt;&lt; getIssueLevelFromEnum(issue-&gt;level()) &lt;&lt; std::endl;</literal_block>
                </block_quote>
            </container>
        </container>
        <container classes="toggle">
            <container classes="header">
                <paragraph>See Python examples</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="python" linenos="False" xml:space="preserve"># Retrieve and print the description of the issue.
print(issue.description())

# Retrieve and print the reference heading number, if related to CellML2.0 specification and format.
print(issue.referenceHeading())

# Retrieve and print the URL for more help and information about the issue.
print(issue.url())

# Retrieve and print the cause - a libcellml.CellmlElementType enum - for the issue.
print(get_issue_cause_from_enum(issue.cellmlElementType()))

# Retrieve and print the level - a libcellml.Issue.LEVEL enum - for the issue.
print(get_issue_level_from_enum(issue.level()))</literal_block>
        </container>
    </section>
</document>
